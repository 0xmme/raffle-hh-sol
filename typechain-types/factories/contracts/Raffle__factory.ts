/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughEthEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferToWinnerFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RandomWordRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandomWinner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101406040523480156200001257600080fd5b5060405162000ee238038062000ee2833981810160405281019062000038919062000261565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508360a081815250508473ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260e081815250508167ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508063ffffffff166101208163ffffffff1660e01b815250505050505050620002e9565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012d8262000100565b9050919050565b6200013f8162000120565b81146200014b57600080fd5b50565b6000815190506200015f8162000134565b92915050565b6000819050919050565b6200017a8162000165565b81146200018657600080fd5b50565b6000815190506200019a816200016f565b92915050565b6000819050919050565b620001b581620001a0565b8114620001c157600080fd5b50565b600081519050620001d581620001aa565b92915050565b600067ffffffffffffffff82169050919050565b620001fa81620001db565b81146200020657600080fd5b50565b6000815190506200021a81620001ef565b92915050565b600063ffffffff82169050919050565b6200023b8162000220565b81146200024757600080fd5b50565b6000815190506200025b8162000230565b92915050565b600080600080600060a0868803121562000280576200027f620000fb565b5b600062000290888289016200014e565b9550506020620002a38882890162000189565b9450506040620002b688828901620001c4565b9350506060620002c98882890162000209565b9250506080620002dc888289016200024a565b9150509295509295909350565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610b8f6200035360003960006103cf015260006103ac0152600061038b0152600061034f01526000818161013b015261022101526000818161016101526101b50152610b8f6000f3fe6080604052600436106100555760003560e01c806309bc33a71461005a5780631fe543e3146100855780632cfcc539146100ae578063473f1ddc146100b8578063522a1f0b146100e3578063e55ae4e8146100fa575b600080fd5b34801561006657600080fd5b5061006f610137565b60405161007c91906106b5565b60405180910390f35b34801561009157600080fd5b506100ac60048036038101906100a79190610869565b61015f565b005b6100b661021f565b005b3480156100c457600080fd5b506100cd610321565b6040516100da9190610906565b60405180910390f35b3480156100ef57600080fd5b506100f861034b565b005b34801561010657600080fd5b50610121600480360381019061011c9190610921565b610494565b60405161012e9190610906565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161020892919061094e565b60405180910390fd5b61021b82826104db565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610279576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016104109594939291906109ef565b602060405180830381600087803b15801561042a57600080fd5b505af115801561043e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104629190610a57565b9050807f5644a06bd8eb2e50e957758f239ecf217619be2d65b9ec935825f1e12051284f60405160405180910390a250565b60008082815481106104a9576104a8610a84565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106104f6576104f5610a84565b5b60200260200101516105089190610ae2565b9050600080828154811061051f5761051e610a84565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16476040516105b390610b44565b60006040518083038185875af1925050503d80600081146105f0576040519150601f19603f3d011682016040523d82523d6000602084013e6105f5565b606091505b5050905080610630576040517f7a84c07000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b6000819050919050565b6106af8161069c565b82525050565b60006020820190506106ca60008301846106a6565b92915050565b6000604051905090565b600080fd5b600080fd5b6106ed8161069c565b81146106f857600080fd5b50565b60008135905061070a816106e4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61075e82610715565b810181811067ffffffffffffffff8211171561077d5761077c610726565b5b80604052505050565b60006107906106d0565b905061079c8282610755565b919050565b600067ffffffffffffffff8211156107bc576107bb610726565b5b602082029050602081019050919050565b600080fd5b60006107e56107e0846107a1565b610786565b90508083825260208201905060208402830185811115610808576108076107cd565b5b835b81811015610831578061081d88826106fb565b84526020840193505060208101905061080a565b5050509392505050565b600082601f8301126108505761084f610710565b5b81356108608482602086016107d2565b91505092915050565b600080604083850312156108805761087f6106da565b5b600061088e858286016106fb565b925050602083013567ffffffffffffffff8111156108af576108ae6106df565b5b6108bb8582860161083b565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108f0826108c5565b9050919050565b610900816108e5565b82525050565b600060208201905061091b60008301846108f7565b92915050565b600060208284031215610937576109366106da565b5b6000610945848285016106fb565b91505092915050565b600060408201905061096360008301856108f7565b61097060208301846108f7565b9392505050565b6000819050919050565b61098a81610977565b82525050565b600067ffffffffffffffff82169050919050565b6109ad81610990565b82525050565b600061ffff82169050919050565b6109ca816109b3565b82525050565b600063ffffffff82169050919050565b6109e9816109d0565b82525050565b600060a082019050610a046000830188610981565b610a1160208301876109a4565b610a1e60408301866109c1565b610a2b60608301856109e0565b610a3860808301846109e0565b9695505050505050565b600081519050610a51816106e4565b92915050565b600060208284031215610a6d57610a6c6106da565b5b6000610a7b84828501610a42565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610aed8261069c565b9150610af88361069c565b925082610b0857610b07610ab3565b5b828206905092915050565b600081905092915050565b50565b6000610b2e600083610b13565b9150610b3982610b1e565b600082019050919050565b6000610b4f82610b21565b915081905091905056fea2646970667358221220c92b9b318bbdfaba30983ff3881736b916b2ea165927e7bf722c8c77c7d732ab64736f6c63430008080033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    keyHash: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinatorV2,
      entranceFee,
      keyHash,
      subscriptionId,
      callbackGasLimit,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    keyHash: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      entranceFee,
      keyHash,
      subscriptionId,
      callbackGasLimit,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
