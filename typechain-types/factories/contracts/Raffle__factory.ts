/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "playerCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__NoUpkeepNeeded",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughEthEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__RaffleNotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferToWinnerFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RandomWordRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPlayerCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040523480156200001257600080fd5b50604051620018dc380380620018dc8339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250508061014081815250506000600160146101000a81548160ff021916908360018111156200012257620001216200033c565b5b0217905550426002819055505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610140516114f5620003e76000396000818161083b01526108e4015260006106eb015260006106c8015260006106a70152600061066b015260008181610340015261043d01526000818161037d01526103d101526114f56000f3fe6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b41461027e578063a5749710146102a9578063c2e52206146102d4578063e55ae4e8146102ff576100dd565b806353a2c19a146101ea5780635f1b0fd8146102155780636e04ff0d14610240576100dd565b80632cfcc539116100bb5780632cfcc53914610161578063378997701461016b5780634585e33b14610196578063473f1ddc146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c76565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610d08565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610ebc565b61037b565b005b61016961043b565b005b34801561017757600080fd5b506101806105aa565b60405161018d9190610c76565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b89190610f73565b6105b4565b005b3480156101cb57600080fd5b506101d46107b3565b6040516101e19190611001565b60405180910390f35b3480156101f657600080fd5b506101ff6107dd565b60405161020c9190610c76565b60405180910390f35b34801561022157600080fd5b5061022a6107ec565b6040516102379190610c76565b60405180910390f35b34801561024c57600080fd5b50610267600480360381019061026291906110d1565b6107f9565b6040516102759291906111bd565b60405180910390f35b34801561028a57600080fd5b506102936108e0565b6040516102a09190610c76565b60405180910390f35b3480156102b557600080fd5b506102be610908565b6040516102cb9190610c76565b60405180910390f35b3480156102e057600080fd5b506102e9610910565b6040516102f69190610c76565b60405180910390f35b34801561030b57600080fd5b50610326600480360381019061032191906111ed565b61091c565b6040516103339190611001565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042492919061121a565b60405180910390fd5b6104378282610963565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610495576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a9576104a8610c91565b5b600160149054906101000a900460ff1660018111156104cb576104ca610c91565b5b14610502576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105ce604051806020016040528060008152506107f9565b5090508061063d5747600080549050600160149054906101000a900460ff1660018111156105ff576105fe610c91565b5b6040517f56d4bf1f00000000000000000000000000000000000000000000000000000000815260040161063493929190611243565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561066257610661610c91565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161072c9594939291906112f2565b602060405180830381600087803b15801561074657600080fd5b505af115801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e919061135a565b9050807f5644a06bd8eb2e50e957758f239ecf217619be2d65b9ec935825f1e12051284f60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60006060600080600181111561081257610811610c91565b5b600160149054906101000a900460ff16600181111561083457610833610c91565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261086891906113b6565b119050600080600080549050119050600080471190508380156108885750825b80156108915750805b801561089a5750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600047905090565b60008080549050905090565b6000808281548110610931576109306113ea565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080805490508260008151811061097e5761097d6113ea565b5b60200260200101516109909190611448565b905060008082815481106109a7576109a66113ea565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a3b906114aa565b60006040518083038185875af1925050503d8060008114610a78576040519150601f19603f3d011682016040523d82523d6000602084013e610a7d565b606091505b5050905080610ab8576040517f7a84c07000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2600067ffffffffffffffff811115610b3857610b37610d79565b5b604051908082528060200260200182016040528015610b665781602001602082028036833780820191505090505b5060009080519060200190610b7c929190610bb6565b50426002819055506000600160146101000a81548160ff02191690836001811115610baa57610ba9610c91565b5b02179055505050505050565b828054828255906000526020600020908101928215610c2f579160200282015b82811115610c2e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bd6565b5b509050610c3c9190610c40565b5090565b5b80821115610c59576000816000905550600101610c41565b5090565b6000819050919050565b610c7081610c5d565b82525050565b6000602082019050610c8b6000830184610c67565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610cd157610cd0610c91565b5b50565b6000819050610ce282610cc0565b919050565b6000610cf282610cd4565b9050919050565b610d0281610ce7565b82525050565b6000602082019050610d1d6000830184610cf9565b92915050565b6000604051905090565b600080fd5b600080fd5b610d4081610c5d565b8114610d4b57600080fd5b50565b600081359050610d5d81610d37565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610db182610d68565b810181811067ffffffffffffffff82111715610dd057610dcf610d79565b5b80604052505050565b6000610de3610d23565b9050610def8282610da8565b919050565b600067ffffffffffffffff821115610e0f57610e0e610d79565b5b602082029050602081019050919050565b600080fd5b6000610e38610e3384610df4565b610dd9565b90508083825260208201905060208402830185811115610e5b57610e5a610e20565b5b835b81811015610e845780610e708882610d4e565b845260208401935050602081019050610e5d565b5050509392505050565b600082601f830112610ea357610ea2610d63565b5b8135610eb3848260208601610e25565b91505092915050565b60008060408385031215610ed357610ed2610d2d565b5b6000610ee185828601610d4e565b925050602083013567ffffffffffffffff811115610f0257610f01610d32565b5b610f0e85828601610e8e565b9150509250929050565b600080fd5b60008083601f840112610f3357610f32610d63565b5b8235905067ffffffffffffffff811115610f5057610f4f610f18565b5b602083019150836001820283011115610f6c57610f6b610e20565b5b9250929050565b60008060208385031215610f8a57610f89610d2d565b5b600083013567ffffffffffffffff811115610fa857610fa7610d32565b5b610fb485828601610f1d565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610feb82610fc0565b9050919050565b610ffb81610fe0565b82525050565b60006020820190506110166000830184610ff2565b92915050565b600080fd5b600067ffffffffffffffff82111561103c5761103b610d79565b5b61104582610d68565b9050602081019050919050565b82818337600083830152505050565b600061107461106f84611021565b610dd9565b9050828152602081018484840111156110905761108f61101c565b5b61109b848285611052565b509392505050565b600082601f8301126110b8576110b7610d63565b5b81356110c8848260208601611061565b91505092915050565b6000602082840312156110e7576110e6610d2d565b5b600082013567ffffffffffffffff81111561110557611104610d32565b5b611111848285016110a3565b91505092915050565b60008115159050919050565b61112f8161111a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561116f578082015181840152602081019050611154565b8381111561117e576000848401525b50505050565b600061118f82611135565b6111998185611140565b93506111a9818560208601611151565b6111b281610d68565b840191505092915050565b60006040820190506111d26000830185611126565b81810360208301526111e48184611184565b90509392505050565b60006020828403121561120357611202610d2d565b5b600061121184828501610d4e565b91505092915050565b600060408201905061122f6000830185610ff2565b61123c6020830184610ff2565b9392505050565b60006060820190506112586000830186610c67565b6112656020830185610c67565b6112726040830184610c67565b949350505050565b6000819050919050565b61128d8161127a565b82525050565b600067ffffffffffffffff82169050919050565b6112b081611293565b82525050565b600061ffff82169050919050565b6112cd816112b6565b82525050565b600063ffffffff82169050919050565b6112ec816112d3565b82525050565b600060a0820190506113076000830188611284565b61131460208301876112a7565b61132160408301866112c4565b61132e60608301856112e3565b61133b60808301846112e3565b9695505050505050565b60008151905061135481610d37565b92915050565b6000602082840312156113705761136f610d2d565b5b600061137e84828501611345565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113c182610c5d565b91506113cc83610c5d565b9250828210156113df576113de611387565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061145382610c5d565b915061145e83610c5d565b92508261146e5761146d611419565b5b828206905092915050565b600081905092915050565b50565b6000611494600083611479565b915061149f82611484565b600082019050919050565b60006114b582611487565b915081905091905056fea26469706673582212205cf80a370bb7451fc7834c2dcf75b476f9ab426046e2ae1d7708872f2827f70a64736f6c63430008080033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    keyHash: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinatorV2,
      entranceFee,
      keyHash,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    keyHash: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      entranceFee,
      keyHash,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
